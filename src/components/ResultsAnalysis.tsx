import React from 'react';
import { TestResult } from '../types/test';
import { Trophy, TrendingUp, BookOpen, Target, Brain, Star, Share2, Download } from 'lucide-react';
import { getLevelDescription } from '../utils/testAnalysis';

interface ResultsAnalysisProps {
  results: TestResult;
  onRestart: () => void;
}

export const ResultsAnalysis: React.FC<ResultsAnalysisProps> = ({ results, onRestart }) => {
  const getLevelColor = (level: string) => {
    const colors = {
      'A1': 'from-green-500 to-green-600',
      'A2': 'from-blue-500 to-blue-600',
      'B1': 'from-yellow-500 to-yellow-600',
      'B2': 'from-orange-500 to-orange-600',
      'C1': 'from-red-500 to-red-600',
      'C2': 'from-purple-500 to-purple-600'
    };
    return colors[level as keyof typeof colors] || 'from-gray-500 to-gray-600';
  };

  const getPerformanceMessage = (percentage: number) => {
    if (percentage >= 90) return "Outstanding performance! You have excellent English skills.";
    if (percentage >= 80) return "Great job! Your English proficiency is very strong.";
    if (percentage >= 70) return "Well done! You have good English skills with room for improvement.";
    if (percentage >= 60) return "Good effort! Continue practicing to strengthen your English.";
    if (percentage >= 50) return "Keep going! Regular practice will help you improve significantly.";
    return "Don't worry! Everyone starts somewhere. Focus on building your foundation.";
  };

  const getPerformanceEmoji = (percentage: number) => {
    if (percentage >= 90) return "🏆";
    if (percentage >= 80) return "🎉";
    if (percentage >= 70) return "👍";
    if (percentage >= 60) return "💪";
    if (percentage >= 50) return "📚";
    return "🌱";
  };

  const handleShare = () => {
    if (navigator.share) {
      navigator.share({
        title: 'My English Level Assessment Results',
        text: `I achieved ${results.level} level with ${Math.round(results.percentage)}% on the Academico English Assessment!`,
        url: window.location.href
      });
    } else {
      // Fallback: copy to clipboard
      const text = `I achieved ${results.level} level with ${Math.round(results.percentage)}% on the Academico English Assessment!`;
      navigator.clipboard.writeText(text);
      alert('Results copied to clipboard!');
    }
  };

  const handleDownload = () => {
    const resultText = `
English Level Assessment Results
================================

Level: ${results.level}
Score: ${results.totalScore}/${results.maxScore} (${Math.round(results.percentage)}%)

Description: ${getLevelDescription(results.level)}

Strengths: ${results.strengths.join(', ') || 'None identified'}
Areas for Improvement: ${results.weaknesses.join(', ') || 'None identified'}

Recommendations:
${results.recommendations.map((rec, index) => `${index + 1}. ${rec}`).join('\n')}

Generated by Academico - AI-Powered English Assessment
    `;

    const blob = new Blob([resultText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `english-assessment-results-${results.level}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-red-50 to-amber-50 py-4 md:py-8">
      <div className="max-w-4xl mx-auto px-4">
        {/* Header */}
        <div className="text-center mb-6 md:mb-8">
          <div className="flex items-center justify-center space-x-3 mb-4">
            <img src="/logo.jpg" alt="Academico" className="h-10 w-10 md:h-12 md:w-12 rounded-lg" />
            <h1 className="text-2xl md:text-3xl font-bold text-gray-900">Test Results</h1>
          </div>
          <div className="flex items-center justify-center space-x-2 bg-red-100 px-4 py-2 rounded-full inline-flex">
            <Brain className="h-4 w-4 md:h-5 md:w-5 text-red-700" />
            <span className="text-red-700 font-semibold text-sm md:text-base">AI-Powered Analysis</span>
          </div>
        </div>

        {/* Main Results Card */}
        <div className="bg-white rounded-2xl shadow-xl p-6 md:p-8 mb-6 md:mb-8">
          <div className="text-center mb-6 md:mb-8">
            <div className="flex items-center justify-center space-x-4 mb-4">
              <div className={`inline-flex items-center justify-center w-20 h-20 md:w-24 md:h-24 rounded-full bg-gradient-to-r ${getLevelColor(results.level)} text-white text-2xl md:text-3xl font-bold`}>
              {results.level}
              </div>
              <div className="text-4xl md:text-5xl">
                {getPerformanceEmoji(results.percentage)}
              </div>
            </div>
            <h2 className="text-xl md:text-2xl font-bold text-gray-900 mb-2">
              Your English Level: {results.level}
            </h2>
            <p className="text-gray-600 text-base md:text-lg mb-4">
              {getLevelDescription(results.level)}
            </p>
            <div className="bg-gray-50 rounded-lg p-4 inline-block">
              <div className="text-2xl md:text-3xl font-bold text-gray-900">
                {results.totalScore}/{results.maxScore}
              </div>
              <div className="text-gray-600 text-sm md:text-base">
                {Math.round(results.percentage)}% Score
              </div>
            </div>
          </div>

          <div className="bg-gradient-to-r from-red-50 to-amber-50 rounded-lg p-4 md:p-6 mb-6">
            <div className="flex items-start space-x-3">
              <Star className="h-5 w-5 md:h-6 md:w-6 text-amber-600 mt-1" />
              <div>
                <h3 className="font-semibold text-gray-900 mb-2 text-sm md:text-base">AI Analysis</h3>
                <p className="text-gray-700 text-sm md:text-base">{getPerformanceMessage(results.percentage)}</p>
              </div>
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex flex-col sm:flex-row justify-center space-y-3 sm:space-y-0 sm:space-x-4">
            <button
              onClick={handleShare}
              className="flex items-center justify-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200"
            >
              <Share2 className="h-4 w-4" />
              <span className="text-sm">Share Results</span>
            </button>
            <button
              onClick={handleDownload}
              className="flex items-center justify-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors duration-200"
            >
              <Download className="h-4 w-4" />
              <span className="text-sm">Download Report</span>
            </button>
          </div>
        </div>

        {/* Category Breakdown */}
        <div className="grid md:grid-cols-2 gap-6 mb-6 md:mb-8">
          <div className="bg-white rounded-xl shadow-lg p-4 md:p-6">
            <h3 className="text-lg md:text-xl font-bold text-gray-900 mb-4 flex items-center">
              <Target className="h-5 w-5 md:h-6 md:w-6 text-red-700 mr-2" />
              Category Performance
            </h3>
            <div className="space-y-4">
              {Object.entries(results.categoryScores).map(([category, score]) => {
                const maxCategoryScore = category === 'grammar' ? 15 : category === 'vocabulary' ? 15 : category === 'reading' ? 12 : 0;
                const percentage = maxCategoryScore > 0 ? (score / maxCategoryScore) * 100 : 0;
                return (
                  <div key={category} className="space-y-2">
                    <div className="flex justify-between items-center">
                      <span className="capitalize font-medium text-gray-700 text-sm md:text-base">{category}</span>
                      <span className="text-sm text-gray-600">{Math.round(percentage)}%</span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <div 
                        className="bg-gradient-to-r from-red-700 to-amber-500 h-2 rounded-full transition-all duration-500"
                        style={{ width: `${percentage}%` }}
                      ></div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-lg p-4 md:p-6">
            <h3 className="text-lg md:text-xl font-bold text-gray-900 mb-4 flex items-center">
              <TrendingUp className="h-5 w-5 md:h-6 md:w-6 text-green-600 mr-2" />
              Strengths & Areas for Improvement
            </h3>
            
            {results.strengths.length > 0 && (
              <div className="mb-4">
                <h4 className="font-semibold text-green-700 mb-2 text-sm md:text-base">Strengths:</h4>
                <div className="flex flex-wrap gap-2">
                  {results.strengths.map((strength, index) => (
                    <span key={index} className="bg-green-100 text-green-800 px-3 py-1 rounded-full text-xs md:text-sm">
                      {strength}
                    </span>
                  ))}
                </div>
              </div>
            )}

            {results.weaknesses.length > 0 && (
              <div>
                <h4 className="font-semibold text-orange-700 mb-2 text-sm md:text-base">Areas for Improvement:</h4>
                <div className="flex flex-wrap gap-2">
                  {results.weaknesses.map((weakness, index) => (
                    <span key={index} className="bg-orange-100 text-orange-800 px-3 py-1 rounded-full text-xs md:text-sm">
                      {weakness}
                    </span>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Recommendations */}
        <div className="bg-white rounded-xl shadow-lg p-4 md:p-6 mb-6 md:mb-8">
          <h3 className="text-lg md:text-xl font-bold text-gray-900 mb-4 flex items-center">
            <BookOpen className="h-5 w-5 md:h-6 md:w-6 text-blue-600 mr-2" />
            Personalized Recommendations
          </h3>
          <div className="grid gap-4">
            {results.recommendations.map((recommendation, index) => (
              <div key={index} className="flex items-start space-x-3 p-3 md:p-4 bg-blue-50 rounded-lg">
                <div className="bg-blue-600 text-white rounded-full w-5 h-5 md:w-6 md:h-6 flex items-center justify-center text-xs md:text-sm font-bold">
                  {index + 1}
                </div>
                <p className="text-gray-700 text-sm md:text-base">{recommendation}</p>
              </div>
            ))}
          </div>
        </div>

        {/* Action Buttons */}
        <div className="text-center space-y-4">
          <button
            onClick={onRestart}
            className="bg-gradient-to-r from-red-700 to-red-600 hover:from-red-800 hover:to-red-700 text-white font-semibold py-3 px-6 md:px-8 rounded-lg transition-all duration-200 transform hover:scale-105 shadow-lg"
          >
            Take Test Again
          </button>
          <p className="text-gray-600 text-xs md:text-sm">
            Want to improve your score? Practice the recommended areas and retake the test!
          </p>
        </div>
      </div>
    </div>
  );
};